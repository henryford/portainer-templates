{
  "version": "2",
  "templates": [
    {
      "type": 1,
      "title": "Registry",
      "description": "Docker image registry",
      "categories": ["docker"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/registry.png",
      "image": "registry:latest",
      "ports": ["5000/tcp"],
      "volumes": [
        {
          "container": "/var/lib/registry"
        }
      ]
    },
    {
      "type": 1,
      "title": "Ubuntu",
      "description": "Debian-based Linux operating system",
      "categories": ["operating-system"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/ubuntu.png",
      "image": "ubuntu:latest",
      "interactive": true,
      "command": "/bin/bash"
    },
    {
      "type": 1,
      "title": "NodeJS",
      "description": "JavaScript-based platform for server-side and networking applications",
      "categories": ["development"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/node.png",
      "image": "node:latest",
      "interactive": true,
      "command": "/bin/bash"
    },
    {
      "type": 1,
      "title": "Nginx",
      "description": "High performance web server",
      "categories": ["webserver"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/nginx.png",
      "image": "nginx:latest",
      "ports": ["80/tcp", "443/tcp"],
      "volumes": [
        {
          "container": "/etc/nginx"
        },
        {
          "container": "/usr/share/nginx/html"
        }
      ]
    },
    {
      "type": 1,
      "title": "Httpd",
      "description": "Open-source HTTP server",
      "categories": ["webserver"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/httpd.png",
      "image": "httpd:latest",
      "ports": ["80/tcp"],
      "volumes": [
        {
          "container": "/usr/local/apache2/htdocs/"
        }
      ]
    },
    {
      "type": 1,
      "title": "Caddy",
      "description": "Open-source web server with automatic HTTPS written in Go",
      "categories": ["webserver"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/caddy.png",
      "image": "caddy:latest",
      "ports": ["80/tcp"],
      "volumes": [
        {
          "container": "/data"
        }
      ]
    },
    {
      "type": 1,
      "title": "Gitlab CE",
      "description": "Open-source end-to-end software development platform",
      "note": "Default username is <b>root</b>. Check the <a href=\"https://docs.gitlab.com/omnibus/docker/README.html#after-starting-a-container\" target=\"_blank\">Gitlab documentation</a> to get started.",
      "categories": ["development", "project-management"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/gitlab_ce.png",
      "image": "gitlab/gitlab-ce:latest",
      "ports": ["80/tcp", "443/tcp", "22/tcp"],
      "volumes": [
        {
          "container": "/etc/gitlab"
        },
        {
          "container": "/var/log/gitlab"
        },
        {
          "container": "/var/opt/gitlab"
        }
      ]
    },
    {
      "type": 1,
      "title": "Minio",
      "description": "A distributed object storage server built for cloud applications and devops",
      "categories": ["storage"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/minio.png",
      "image": "quay.io/minio/minio:latest",
      "enuvhbekcbefrbugcuvtcecv": [
        {
          "name": "MINIO_ROOT_USER",
          "label": "Root user"
        },
        {
          "name": "MINIO_ROOT_PASSWORD",
          "label": "Root password"
        }
      ],
      "volumes": [
        {
          "container": "/data"
        },
        {
          "container": "/root/.minio"
        }
      ],
      "command": "server /data --console-address ':9001'"
    },
    {
      "type": 1,
      "title": "Scality S3",
      "description": "Standalone AWS S3 protocol server",
      "categories": ["storage"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/scality-s3.png",
      "image": "scality/s3server",
      "ports": ["8000/tcp"],
      "env": [
        {
          "name": "SCALITY_ACCESS_KEY",
          "label": "Scality S3 access key"
        },
        {
          "name": "SCALITY_SECRET_KEY",
          "label": "Scality S3 secret key"
        }
      ],
      "volumes": [
        {
          "container": "/usr/src/app/localData"
        },
        {
          "container": "/usr/src/app/localMetadata"
        }
      ]
    },
    {
      "type": 2,
      "title": "Portainer Agent",
      "description": "Manage all the resources in your Swarm cluster",
      "note": "The agent will be deployed globally inside your cluster and available on port 9001.",
      "categories": ["portainer"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/portainer.png",
      "repository": {
        "url": "https://github.com/portainer/templates",
        "stackfile": "stacks/portainer-agent/docker-stack.yml"
      }
    },
    {
      "type": 2,
      "title": "OpenFaaS",
      "name": "func",
      "description": "Serverless functions made simple",
      "note": "Deploys the API gateway and sample functions. You can access the UI on port 8080. <b>Warning</b>: the name of the stack must be 'func'.",
      "categories": ["serverless"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/openfaas.png",
      "repository": {
        "url": "https://github.com/openfaas/faas",
        "stackfile": "docker-compose.yml"
      }
    },
    {
      "type": 2,
      "title": "IronFunctions",
      "description": "Open-source serverless computing platform",
      "note": "Deploys the IronFunctions API and UI.",
      "categories": ["serverless"],
      "platform": "linux",
      "logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/ironfunctions.png",
      "repository": {
        "url": "https://github.com/portainer/templates",
        "stackfile": "stacks/ironfunctions/docker-stack.yml"
      }
    },
    {
      "type": 4,
      "title": "CockroachDB",
      "description": "CockroachDB cluster",
      "note": "Deploys an insecure CockroachDB cluster, please refer to <a href=\"https://www.cockroachlabs.com/docs/stable/orchestrate-cockroachdb-with-docker-swarm.html\" target=\"_blank\">CockroachDB documentation</a> for production deployments.",
      "stackfile": "https://raw.githubusercontent.com/portainer/templates/master/stacks/cockroachdb/edge/docker-stack.yml"
    },
    {
      "type": 3,
      "title": "VRising Server",
      "description": "VRising dedicated server. Will populate ini files on first run. Stop after first run and edit files manually in the server data directory.",
      "categories": ["dedi","game"],
      "platform": "linux",
      "logo": "https://styles.redditmedia.com/t5_48zfnu/styles/communityIcon_n86l9me2pjv61.png?width=256&s=cbb5bb2c022cdd4ee1c8e010cf2a60296dd22a3e",
      "repository": {
        "url": "https://github.com/henryford/portainer-templates.git",
        "stackfile": "stacks/vrising-server/docker-compose.yaml"
      },
      "env": [
        {
          "name": "SRVNAME",
          "label": "Server Name",
          "description": "Set Server Name for first start up. Should be set in ini.",
          "default": "TrueOsiris Docker Image hosting VRising Dedicated"
        },
        {
          "name": "SRVBIN",
          "label": "Server Bin Directory",
          "description": "Directory steamcmd stores the downloaded files in",
          "default": "srvbin"
        },
        {
          "name": "SRVDATA",
          "label": "Server Data Directory",
          "description": "Directory the server stores runtime/config information. Should be persistent (full path).",
          "default": "srvdata"
        },
        {
          "name": "TIMEZONE",
          "label": "Timezone for the container",
          "default": "Europe/Berlin"
        }
      ]
    },
    {
      "type": 3,
      "title": "Code-Server",
      "description": "Provide MS Visual Studio Code in a browser",
      "categories": ["util","admin","code","dev"],
      "platform": "linux",
      "logo": "https://styles.redditmedia.com/t5_48zfnu/styles/communityIcon_n86l9me2pjv61.png?width=256&s=cbb5bb2c022cdd4ee1c8e010cf2a60296dd22a3e",
      "repository": {
        "url": "https://github.com/henryford/portainer-templates.git",
        "stackfile": "stacks/code-server/docker-compose.yaml"
      },
      "env": [
        {
          "name": "CSPASS",
          "label": "CodeServer Access Password",
          "description": "Password for Codeserver",
          "default": "password"
        },
        {
          "name": "CSHASHPASS",
          "label": "CodeServer Access Password - Hashed",
          "description": "Password for Codeserver - Hashed (create with echo -n 'thisismypassword' | npx argon2-cli -e)",
          "default": ""
        },
        {
          "name": "CSSUPASS",
          "label": "Password for sudo",
          "description": "Password for sudo",
          "default": "password"
        },
        {
          "name": "CSSUPASSHASH",
          "label": "Password for sudo - Hashed",
          "description": "Password for sudo - Hashed"
        },
        {
          "name": "CSPROXDOM",
          "label": "Proxy Domain",
          "description": "The domain you're proxying code-server through",
          "default": ""
        },
        {
          "name": "CSCONF",
          "label": "Config Directory",
          "description": "You can use a local directory, otherwise a named volume csconf will be used",
          "default": "csconf"
        },
        {
          "name": "CSPORT",
          "label": "Port code-server will be exposed on",
          "default": "8080"
        },
        {
          "name": "TIMEZONE",
          "label": "Timezone for the container",
          "default": "Europe/Berlin"
        }
      ]
    }
  ]
}
